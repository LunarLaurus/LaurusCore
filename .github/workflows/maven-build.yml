name: Java-Maven-Release

on:
  push:
    branches:
      - main

env:
  JAVA_VERSION: '17'
  JAVA_DISTRO: 'zulu'

jobs:
  get-version:
    runs-on: ubuntu-latest
    outputs:
      current_version: ${{ steps.extract_version.outputs.current_version }}
    steps:
      - name: Checkout Code
        uses: actions/checkout@v5

      - name: Setup JDK
        uses: actions/setup-java@v4
        with:
          java-version: ${{ env.JAVA_VERSION }}
          distribution: ${{ env.JAVA_DISTRO }}
          cache: maven

      - name: Extract Current Version
        id: extract_version
        run: |
          set -e
          VERSION=$(mvn help:evaluate -Dexpression=project.version -q -DforceStdout)
          echo "Current version is $VERSION"
          echo "current_version=$VERSION" >> $GITHUB_ENV
          echo "current_version=$VERSION" >> $GITHUB_OUTPUT

  build:
    runs-on: ubuntu-latest
    needs: get-version
    outputs:
      tag: ${{ steps.create_tag.outputs.tag }}
    steps:
      - name: Checkout Code
        uses: actions/checkout@v5

      - name: Setup JDK
        uses: actions/setup-java@v4
        with:
          java-version: ${{ env.JAVA_VERSION }}
          distribution: ${{ env.JAVA_DISTRO }}
          cache: maven
          
      - name: Cache Maven dependencies
        uses: actions/cache@v4
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-maven-

      - name: Build with Maven
        run: mvn clean package -DskipTests
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Upload built artifacts
        uses: actions/upload-artifact@v4
        with:
          name: maven-build
          path: "**/target/*.jar"
          if-no-files-found: error  # Fail workflow if no JARs are found
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Create Git Tag
        id: create_tag
        run: |
          git config --global user.email "actions@github.com"
          git config --global user.name "GitHub Actions"
          TAG="v${{ needs.get-version.outputs.current_version }}"
          echo "tag=$TAG" >> $GITHUB_ENV
          echo "tag=$TAG" >> $GITHUB_OUTPUT
          git tag -a "$TAG" -m "Release $TAG"
          git push origin "$TAG"

  deploy:
    needs: build
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    steps:
      - name: Checkout Code
        uses: actions/checkout@v5
    
      - name: Set up JDK
        uses: actions/setup-java@v4
        with:
          java-version: ${{ env.JAVA_VERSION }}
          distribution: ${{ env.JAVA_DISTRO }}
          server-id: github
          cache: maven       

      - name: Cache Maven dependencies
        uses: actions/cache@v4
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-maven-
    
      - name: Download built artifacts
        uses: actions/download-artifact@v5
        with:
          name: maven-build
          path: target/

      - name: Deploy to GitHub Packages
        run: mvn deploy -DskipTests
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  release:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ needs.build.outputs.tag }}
          name: "Release ${{ needs.build.outputs.tag }}"
          draft: false
          prerelease: false
          files: |
            target/*.jar
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  
  bump-version:
    needs: # âœ… Bump version after release and deployment
      - release  
      - deploy
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v5

      - name: Setup JDK
        uses: actions/setup-java@v4
        with:
          java-version: ${{ env.JAVA_VERSION }}
          distribution: ${{ env.JAVA_DISTRO }}
          cache: maven

      - name: Cache Maven dependencies
        uses: actions/cache@v4
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-maven-

      - name: Bump Java Version
        id: bump_version
        run: |
          set -e
          VERSION=$(mvn help:evaluate -Dexpression=project.version -q -DforceStdout)
          NEW_VERSION=$(echo $VERSION | awk -F. -v OFS=. '{$NF = $NF + 1 ; print}')
          echo "Bumping version from $VERSION to $NEW_VERSION"
          mvn versions:set -DnewVersion=$NEW_VERSION -DgenerateBackupPoms=false
          mvn versions:update-parent -DgenerateBackupPoms=false
          mvn versions:update-child-modules -DgenerateBackupPoms=false
          echo "new_version=$NEW_VERSION" >> $GITHUB_ENV
          echo "new_version=$NEW_VERSION" >> $GITHUB_OUTPUT

      - name: Commit and Push Updated Version
        run: |
          git config --global user.email "actions@github.com"
          git config --global user.name "GitHub Actions"            
          # Ensure the latest changes from remote
          git fetch --prune
          git stash # Stash any unstaged changes
          git pull --rebase # Rebase to avoid merge conflicts
          git stash pop # Reapply the stashed changes            
          # Add and commit version changes
          git add pom.xml **/pom.xml
          git commit -m "Bump version to ${{ env.new_version }} for next release." || echo "No changes to commit"
          # Push changes
          git push origin ${{ github.ref }}
